Token Sliding and Exchange
system:sage


{{{id=1|
# F-1 load main minimum rank/maximum nullity and zero forcing functions
# zero forcing, PSD forcing, and minimum rank code
# developed by S. Butler, L. DeLoss, J. Grout, H.T. Hall, J. LaGrange, J.C.-H. Lin,T. McKay, J. Smith, G. Tims
# updated and maintained by Jephian C.-H. Lin 
URL='https://raw.githubusercontent.com/jephianlin/mr_JG/py2/'
files=['Zq_c.pyx','Zq.py','zero_forcing_64.pyx','zero_forcing_wavefront.pyx','minrank.py', 'inertia.py']
for f in files:
    print("Loading %s..."%f);
    load(URL+f)
///
Loading Zq_c.pyx...
Compiling /home/sageuser/2/.sage/temp/sage.math.iastate.edu/32068/tmp_Ly4b1q.pyx...
Loading Zq.py...
Loading zero_forcing_64.pyx...
Compiling /home/sageuser/2/.sage/temp/sage.math.iastate.edu/32068/tmp_bC41zV.pyx...
Loading zero_forcing_wavefront.pyx...
Compiling /home/sageuser/2/.sage/temp/sage.math.iastate.edu/32068/tmp_8H2kPC.pyx...
Loading minrank.py...
Loading inertia.py...
}}}

{{{id=64|

///
}}}

{{{id=2|
# F-2 other zero forcing functions
#
# Zero forcing number Z(G)
def Z(g):
    z=len(zero_forcing_set_bruteforce(g))
    return z
#
# All zero forcing sets of G of size k
# input: a graph G and a positive integer k 
# ouput: a list of all zero forcing sets G of size k
def ZFsets(G,k):
    ord=G.order()
    V = G.vertices()
    S = subsets(V,k)
    ZFS=[]
    for s in S:
        A=zerosgame(G,s)
        if len(A)==ord:
            ZFS.append(s)
    return ZFS
///
}}}

{{{id=3|
# F-3 Function for propagation time of set S, pt(G,S)
# adapted by Leslie Hogben from Steve Butler's skew propagation time code (F-10)
# input: a graph G and a set S of vertices
# output: pt(G,S) = prop time of S in G (if -1 is returned then S is not a zero forcing set)
def ptz(G,S):
    V=set(G.vertices())
    count = 0
    done = False
    active = set(S)
    filled = set(S)
    for v in V:
        N=set(G.neighbors(v))
        if v in active and N.issubset(filled):
            active.remove(v)
        if (v in filled) and (v not in active) and (len(N.intersection(filled)) == G.degree(v)-1):
            active.add(v)   
    while not done:
        done = True
        new_active = copy(active)
        new_filled = copy(filled)
        for v in active:
            N=set(G.neighbors(v))
            if len(N.intersection(filled)) == G.degree(v)-1:
                if done:
                    done = False
                    count += 1
                N.symmetric_difference_update(N.intersection(filled))
                u=N.pop()
                new_active.remove(v)
                new_active.add(u)
                new_filled.add(u)
        active = copy(new_active)
        filled = copy(new_filled)
        # print filled
        for v in V:
            N=set(G.neighbors(v))
            if v in active and N.issubset(filled):
                active.remove(v)
            if (v in filled) and (v not in active) and (len(N.intersection(filled)) == G.degree(v)-1):
                active.add(v)
    if len(filled)==len(V):
        return count
    return -1
///
}}}

{{{id=63|
# F-4 main function cell zero forcing number loop graphs
# skew forcing uses no loops
# written by Jephian Lin
def gzerosgame(g,F=[],B=[]):
	"""
	Return the derived set for a given graph g with set of banned edges B and a initial set of vertices. The derived set is given by doing generalized zero forcing process. That is, if y is the only white neighbor of x and xy is not banned, then x could force y into black.

	Input:
		g: a simple graph
		F: a list of vertices of g
		B: a list of tuples representing banned edges of g

	Output:
		A set of black vertices when zero forcing process stops.

	Examples:
		sage: gzerosgame(graphs.PathGraph(5),[0])
		set([0, 1, 2, 3, 4])
		sage: gzerosgame(graphs.PathGraph(5),[0],[(1,2)])
		set([0, 1])
	"""
	S=set(F) # suspicuous vertices
	Black_vertices=set(F) # current black vertices
	again=1 # iterate again or not
	while again==1:
		again=0
		for x in S:
			N=set(g.neighbors(x))
			D=N.difference(Black_vertices) # set of white neighbors
			if len(D)==1:
				for v in D:
					y=v # the only white neighbor
				if (((x,y) in B)==False) and (((y,x) in B)==False):
					again=1
					S.remove(x)
					S.add(y)
					Black_vertices.add(y)
				break
	return(Black_vertices)

def gZ_leq(graph, support=[], bannedset=[],i=None):
	"""
	For a given graph with support and banned set, if there is a zero forcing set of size i then return it; otherwise return False.

	Input:
		graph: a simple graph
		support: a list of vertices of g
		bannedset: a list of tuples representing banned edges of graph
		i: an integer, the function check gZ <= i or not

	Output:
		if F is a zero forcing set of size i and support is a subset of F, then return F
		False otherwise

	Examples:
		sage: gZ_leq(graphs.PathGraph(5),[],[],1)
		set([0])
		sage: gZ_leq(graphs.PathGraph(5),[],[(0,1)],1) 
		False
	"""
	if i < len(support):
#		print 'i cannot less than the cardinality of support'
		return False
	j=i-len(support) # additional number of black vertices
	VX=graph.vertices()
	order=graph.order()
	for y in support:
		VX.remove(y)
	# VX is the vertices outside support now
	for subset in Subsets(VX,j):
		test_set=set(support).union(subset) # the set is tested to be a zero forcing set
		outcome=gzerosgame(graph, test_set, bannedset)
		if len(outcome)==order:
			return test_set
	return False

def find_gzfs(graph, support=[], bannedset=[], upper_bound=None, lower_bound=None):
	"""
	For a given graph with support and banned set, return the an optimal generalized zero forcing set. If upper_bound is less than the generalized zero forcing number then return ['wrong']. If lower_bound is greater than the generalized zero forcing number then the return value will not be correct

	Input:
		graph: a simple graph
		support: a list of vertices of g
		bannedset: a list of tuples representing banned edges of graph
		upper_bound: an integer supposed to be an upper bound of gZ. 
		lower_bound: an integer supposed to be a lower bound of gZ. The two bounds may shorten the computation time. But one may leave it as default value if one is not sure.

	Output:
		if F is an optimal zero forcing set of size i then return F. If upper_bound is less than the general zero forcing number then return ['wrong'].

	Examples:
		sage: find_gzfs(graphs.PathGraph(5))
		set([0])
		sage: find_gzfs(graphs.PathGraph(5),[1],[(3,2)])
		set([0, 1, 3])
	"""

	VX=graph.vertices()
	order=graph.order()
	s=len(support)
	for y in support:
		VX.remove(y)
	# VX is the vertices outside support now
	if upper_bound==None:
		upper_bound=order # the default upper bound
	if lower_bound==None:
		lower_bound=len(VX) # temporary lower bound
		for v in VX:
			N=set(graph.neighbors(v))
			D=N.difference(support)
			lower_bound=min([lower_bound,len(D)])
		for v in support:
			N=set(graph.neighbors(v))
			D=N.difference(support)
			lower_bound=min([lower_bound,len(D)-1])
		lower_bound=lower_bound+s # the default lower bound
	i=upper_bound
	find=1 # does sage find a zero forcing set of size i
	outcome=['wrong'] # default outcome
	while i>=lower_bound and find==1:
		find=0
		leq=gZ_leq(graph, support, bannedset,i) # check gZ <= i or not
		if leq!=False:
			outcome=leq
			find=1
			i=i-1
	return outcome

def find_gZ(graph, support=[], bannedset=[], upper_bound=None, lower_bound=None):
	"""
	For a given graph with support and banned set, return the zero. upper_bound and lower_bound could be left as default value if one is not sure.

	Input:
		graph: a simple graph
		support: a list of vertices of g
		bannedset: a list of tuples representing banned edges of graph
		upper_bound: an integer supposed to be an upper bound of gZ. 
		lower_bound: an integer supposed to be a lower bound of gZ. The two bounds may shorten the computation time. But one may leave it as default value if one is not sure.

	Output:
		the generalized zero forcing number

	Examples:
		sage: find_gZ(graphs.PathGraph(5))            
		1
		sage: find_gZ(graphs.PathGraph(5),[1],[(3,2)])
		3
	"""
	return len(find_gzfs(graph, support, bannedset, upper_bound, lower_bound))

def X(g):
	"""
	For a given graph g, return the verices set X of a part of the bipartite used to compute the exhaustive zero forcing number.

	Input:
		g: a simple graph

	Output:
		a list of tuples ('a',i) for all vertices i of g

	Examples:
		sage: X(graphs.PathGraph(5))
		[('a', 0), ('a', 1), ('a', 2), ('a', 3), ('a', 4)]
	"""
	return [('a',i) for i in g.vertices()]

def Y(g):
	"""
	For a given graph g, return the verices set Y of the other part of the bipartite used to compute the exhaustive zero forcing number.

	Input:
		g: a simple graph

	Output:
		a list of tuples ('b',i) for all vertices i of g

	Examples:
		sage: Y(graphs.PathGraph(5))
		[('b', 0), ('b', 1), ('b', 2), ('b', 3), ('b', 4)]
	"""
	return [('b',i) for i in g.vertices()]

def tilde_bipartite(g,I=[]):
	"""
	For a given graph g and an index set I, return the bipartite graph \widetilde{G}_I used to compute the exhaustive zero forcing number.

	Input:
		g: a simple graph
		I: a list of vertices of g

	Output:
		the bipartite graph \widetilde{G}_I

	Examples:
		sage: h=tilde_bipartite(graphs.PathGraph(5),[1])
		sage: h.vertices()
		[('a', 0), ('a', 1), ('a', 2), ('a', 3), ('a', 4), ('b', 0), ('b', 1), ('b', 2), ('b', 3), ('b', 4)]
		sage: h.edges()
		[(('a', 0), ('b', 1), None), (('a', 1), ('b', 0), None), (('a', 1), ('b', 1), None), (('a', 1), ('b', 2), None), (('a', 2), ('b', 1), None), (('a', 2), ('b', 3), None), (('a', 3), ('b', 2), None), (('a', 3), ('b', 4), None), (('a', 4), ('b', 3), None)]
	"""
	E0=[(('a',i), ('b',i)) for i in I] # edges given by I
	E1=[] # invariant edges
	for i in g.vertices():
		for j in g.neighbors(i):
			E1.append((('a',i),('b',j)))
	h=Graph()
	h.add_vertices(X(g))
	h.add_vertices(Y(g)) 
	h.add_edges(E0)
	h.add_edges(E1) # h=(X union Y, E0 union E1)
	return h

def find_EZ(g,bound=None):
	"""
	For a given graph g, return the exhaustive zero forcing number of g. A given bound may shorten the computation.

	Input:
		g: a simple graph
		bound: a integer as an upper bound. It could be left as default value if one is not sure.

	Output:
		the exhaustive zero forcing number (EZ) of g

	Examples:
		sage: find_EZ(graphs.PathGraph(5))
		1
		sage: h=graphs.CycleGraph(5)
		sage: h.add_vertices([5,6,7,8,9])
		sage: h.add_edges([(0,5),(1,6),(2,7),(3,8),(4,9)])
		sage: find_EZ(h) # the EZ of a 5-sun
		2
	"""
	order=g.order()
	Z=find_gZ(g) # without support and banned set, the value is the original zero forcing number
	if bound==None:
		bound=Z # default upper bound
	gZ_bound=bound+order 
	V=set(g.vertices())
	e=-1 # temporary output
	for I in Subsets(V):
		leq=gZ_leq(tilde_bipartite(g,I),Y(g),[],e) # this avoid abundant computation
		if leq==False:
			e=find_gZ(tilde_bipartite(g,I),Y(g),[],gZ_bound,e+1)
			# in this case, we already know e+1-order<=gZ-order<=bound and so e+1<=gZ<=gZ_bound
		if e==gZ_bound:
			break
	return e-order # EZ=max-order

def find_loopedZ(g,I):
    """
    For a given graph g and the index of the vertices with loops, return the zero forcing number of this looped graph.
    
    Input:
        g: a simple graph, the underlying graph of the looped graph.
        I: the index of the vertices with loops.
    
    Output:
        the zero forcing number of this looped graph.
        
    Examples:
        sage: g = Graph({0:[1],1:[0]});
        sage: I=[0,1];
        sage: find_loopedZ(g,I)
        1
        sage: g = Graph({0:[1],1:[0]});
        sage: I=[0];
        sage: find_loopedZ(g,I)
        0    
    """
    return find_gZ(tilde_bipartite(g,I),Y(g),[])-g.order()

def Zskew(g):    # report Z_-(g)
    return find_loopedZ(g,[])
///
}}}

{{{id=4|
# F-6 Load PSD propagation time funtions, including pt_plus(G,S) = PSD propagation time of a set S
# code by Nathan Warnberg
# updated and maintained by Jephian C.-H. Lin 
load('https://raw.githubusercontent.com/jephianlin/zero_forcing/master/psd_prop_time_interval.py')
///
xrange test passed
Loading Zq_c.pyx...
Compiling /home/sageuser/2/.sage/temp/sage.math.iastate.edu/32068/tmp_o7jieM.pyx...
Loading Zq.py...
Loading zero_forcing_64.pyx...
Compiling /home/sageuser/2/.sage/temp/sage.math.iastate.edu/32068/tmp_lwaiTt.pyx...
Loading zero_forcing_wavefront.pyx...
Compiling /home/sageuser/2/.sage/temp/sage.math.iastate.edu/32068/tmp_u12XA2.pyx...
Loading minrank.py...
Loading inertia.py...
}}}

{{{id=76|

///
}}}

{{{id=5|
# F-7 Functions for PSD propagation time

# function to compute pt_+(G,k) = minimum PSD propagation time over sets of size k
# input: a graph G and a positive integer k 
# ouput: pt_+(G,k) 
def ptpk(G,k):
    ord=G.order()
    V = G.vertices()
    S = subsets(V,k)
    ptp = -1
    for s in S:
        ptps=pt_plus(G,s)
        if (ptp < 0):
            ptp=ptps
        if (ptps >= 0) and (ptps < ptp):
            ptp=ptps
    return ptp

# function to compute pt_+(G) = pt_+(G,Z_+(G))
# input: a graph G 
# ouput: pt_+(G) 
def ptp(G):
    ptpg=ptpk(G,Zplus(G))
///
}}}

{{{id=62|
def psd_TEgraph(G,k):
    ord=G.order()
    V = G.vertices()
    S = subsets(V,k)
    TEV = []
    TEE = []
    ptm = -1
    for s in S:
       
        ptms=pt_plus(G,s)
        if (ptms > -1):
            TEV.append(s)
           
           
    N = len(TEV)
                 
    for i in range(N):
           
        for j in range(i+1,N):
            L = len(list(set(TEV[i]) & set(TEV[j])))
               
            if L == k-1:
                TEE.append((TEV[i],TEV[j]))
   
   
    TEG = Graph([TEV,TEE])
    
    return TEG
///
}}}

{{{id=65|
# F-10 Function for skew propagation time of a set
# written by Steve Butler
def prop_time_unlooped(G,S):
    """
    Determine the propagation time of S in G assuming
    all the vertices are unlooped.
    """
    V=set(G.vertices())
    count = 0
    done = False
    active = set(S)
    filled = set(S)
    for v in V:
        N=set(G.neighbors(v))
        if v in active and N.issubset(filled):
            active.remove(v)
        if (v not in active) and (len(N.intersection(filled)) == G.degree(v)-1):
            active.add(v)
    
    while not done:
        done = True
        new_active = copy(active)
        new_filled = copy(filled)

        for v in active:
            N=set(G.neighbors(v))
            if len(N.intersection(filled)) == G.degree(v)-1:
                if done:
                    done = False
                    count += 1
                N.symmetric_difference_update(N.intersection(filled))
                u=N.pop()
                new_active.remove(v)
                new_active.add(u)
                new_filled.add(u)

        active = copy(new_active)
        filled = copy(new_filled)
        for v in V:
            N=set(G.neighbors(v))
            if v in active and N.issubset(filled):
                active.remove(v)
            if (v not in active) and (len(N.intersection(filled)) == G.degree(v)-1):
                active.add(v)
    if len(filled)==len(V):
        return count
    return -1
///
}}}

{{{id=61|
def skew_TEgraph(G,k):

    ord=G.order()

    V = G.vertices()

    S = subsets(V,k)

    TEV = []

    TEE = []

    ptm = -1

    for s in S:

       

        ptms=prop_time_unlooped(G,s)

        if (ptms > -1):

            TEV.append(s)

            

            

    N = len(TEV)

                 

    for i in range(N):

           

        for j in range(i+1,N):

            L = len(list(set(TEV[i]) & set(TEV[j])))

               

            if L == k-1:

                TEE.append((TEV[i],TEV[j]))

   

    

    TEG = Graph(TEE)

    return TEG
///
}}}

{{{id=6|
def psd_TSgraph_ext(G,k):
    ord=G.order()
    V = G.vertices()
    S = subsets(V,k)
    TSV = []
    TSE = []
    ptm = -1
    TSN = []
    for s in S:
       
        ptms=pt_plus(G,s)
        if (ptms > -1):
            TSV.append(s)
           
           
    N = len(TSV)
                 
    for i in range(N):
           
        for j in range(i+1,N):
            L = len(list(set(TSV[i]) & set(TSV[j])))
               
            if L == k-1:
                TSN = set(TSV[j]) - (set(TSV[i]) & set(TSV[j]))
                for m in TSN:
                    for q in set(TSV[i])- (set(TSV[i]) & set(TSV[j])):
                        if m in G.neighbors(q):
                            TSE.append((TSV[i],TSV[j]))
   
   
    TSG = Graph([TSV,TSE],multiedges=False)
    
    return TSG
///
}}}

{{{id=23|
def psd_TSgraph(G,k):
    ord=G.order()
    V = G.vertices()
    S = subsets(V,k)
    TSV = []
    TSE = []
    ptm = -1
    TSN = []
    for s in S:
       
        ptms=pt_plus(G,s)
        if (ptms > -1):
            TSV.append(s)
           
           
    N = len(TSV)
                 
    for i in range(N):
           
        for j in range(i+1,N):
            L = len(list(set(TSV[i]) & set(TSV[j])))
               
            if L == k-1:
                TSN = set(TSV[j]) - (set(TSV[i]) & set(TSV[j]))
                TSM = set(TSV[i]) - (set(TSV[i]) & set(TSV[j]))
               
                for m in TSN:
                    for q in TSM:
                        if m in G.neighbors(q):
                            TSE.append((TSV[i],TSV[j]))
                            
   
    TSG = Graph([TSV,TSE],multiedges=False)
    
    return TSG
///
}}}

{{{id=47|
def std_TSgraph(G,k):
    ord=G.order()
    V = G.vertices()
    S = subsets(V,k)
    TSV = []
    TSE = []
    ptm = -1
    TSN = []
    for s in S:
       
        ptms=ptz(G,s)
        if (ptms > -1):
            TSV.append(s)
           
           
    N = len(TSV)
                 
    for i in range(N):
           
        for j in range(i+1,N):
            L = len(list(set(TSV[i]) & set(TSV[j])))
               
            if L == k-1:
                TSN = set(TSV[j]) - (set(TSV[i]) & set(TSV[j]))
                TSM = set(TSV[i]) - (set(TSV[i]) & set(TSV[j]))
               
                for m in TSN:
                    for q in TSM:
                        if m in G.neighbors(q):
                            TSE.append((TSV[i],TSV[j]))
                            
   
    TSG = Graph([TSV,TSE],multiedges=False)
    
    return TSG
///
}}}

{{{id=71|

///
}}}

{{{id=70|

///
}}}

{{{id=68|

///
}}}

{{{id=69|
g=graphs.CycleGraph(2)
#g.add_edges({(0,2),(3,6)})
show(g)
psd_TSgraph(g,Zplus(g))
///
}}}

{{{id=67|
g=graphs.WheelGraph(7)
g.add_vertex()
g.add_edges([(1,7),(2,7)])
g.add_vertex()
g.add_edges([(4,8),(5,8)])
Z(g)
///
3
}}}

{{{id=7|
g=sage.graphs.generators.random.RandomTree(8)
show(g)
print Zskew(g)
gg=psd_TSgraph(g,Zplus(g))
gg.plot()
///
2
}}}

{{{id=66|
g=graphs.CycleGraph(4)
h=g.copy()
gg=g.cartesian_product(h)
gg.relabel()
Z(gg)
///
8
}}}

{{{id=49|
g=graphs.CompleteBipartiteGraph(4,5)
psd_TSgraph(g,Zplus(g)).plot()
///
}}}

{{{id=59|
psd_TEgraph(gg,Zplus(gg)).plot()
///
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "_sage_input_79.py", line 10, in <module>
    exec compile(u'open("___code___.py","w").write("# -*- coding: utf-8 -*-\\n" + _support_.preparse_worksheet_cell(base64.b64decode("cHNkX1RFZ3JhcGgoZ2csWnBsdXMoZ2cpKS5wbG90KCk="),globals())+"\\n"); execfile(os.path.abspath("___code___.py"))' + '\n', '', 'single')
  File "", line 1, in <module>
    
  File "/tmp/tmpJGyQoY/___code___.py", line 2, in <module>
    exec compile(u'psd_TEgraph(gg,Zplus(gg)).plot()' + '\n', '', 'single')
  File "", line 1, in <module>
    
NameError: name 'gg' is not defined
}}}

{{{id=60|

///
}}}

{{{id=48|

///
}}}

{{{id=57|

///
}}}

{{{id=11|

///
}}}

{{{id=58|
g=graphs.PathGraph(6)
g.add_vertex()
g.add_edges({(5,6),(3,6)})
show(g)
print Zplus(g)
#psd_TSgraph(gg,Zplus(gg)).plot()
psd_TSgraph(g,Zplus(g))
///
}}}

{{{id=12|
pt_plus(gg,[20,21,22,18,19])
///
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "_sage_input_49.py", line 10, in <module>
    exec compile(u'open("___code___.py","w").write("# -*- coding: utf-8 -*-\\n" + _support_.preparse_worksheet_cell(base64.b64decode("cHRfcGx1cyhnZyxbMjAsMjEsMjIsMTgsMTldKQ=="),globals())+"\\n"); execfile(os.path.abspath("___code___.py"))' + '\n', '', 'single')
  File "", line 1, in <module>
    
  File "/tmp/tmpJXrGfC/___code___.py", line 3, in <module>
    exec compile(u'pt_plus(gg,[_sage_const_20 ,_sage_const_21 ,_sage_const_22 ,_sage_const_18 ,_sage_const_19 ])' + '\n', '', 'single')
  File "", line 1, in <module>
    
  File "/home/sageuser/1/.sage/temp/sage.math.iastate.edu/5467/tmp_SeMNKN.py", line 43, in pt_plus
    H.delete_vertices(S)
  File "/home/sage/build/sage-8.1/local/lib/python2.7/site-packages/sage/graphs/generic_graph.py", line 9684, in delete_vertices
    raise RuntimeError("Vertex (%s) not in the graph."%str(vertex))
RuntimeError: Vertex (20) not in the graph.
}}}

{{{id=14|
g=graphs.CompleteMultipartiteGraph([5,4])
psd_TSgraph(g,Zplus(g)).connected_components_number()
///
1
}}}

{{{id=15|
g=graphs.CompleteBipartiteGraph(5,4)

g.add_edge(0,1)

g.add_edge(1,2)

g.add_edge(2,3)

g.add_edge(3,4)
ZFsets(g,5)
///
[(0, 1, 5, 6, 7),
 (0, 1, 5, 6, 8),
 (0, 1, 5, 7, 8),
 (0, 1, 6, 7, 8),
 (0, 5, 6, 7, 8),
 (3, 4, 5, 6, 7),
 (3, 4, 5, 6, 8),
 (3, 4, 5, 7, 8),
 (3, 4, 6, 7, 8),
 (4, 5, 6, 7, 8)]
}}}

{{{id=16|
g.plot()
///
}}}

{{{id=17|
psd_TSgraph(g,Zplus(g)).connected_components_number()
///
2
}}}

{{{id=18|
Z(g)-Zplus(g)
///
0
}}}

{{{id=28|

///
}}}

{{{id=19|
for g in graphs(6):
    h=psd_TSgraph(g,Zplus(g))
    if g.clique_number()!=h.clique_number():
           show(g)
///
}}}

{{{id=29|
g=Graph({0:[1,6],1:[2],2:[3,5,6],3:[4,6],4:[5]})
h=psd_TSgraph(g,Zplus(g))
h.clique_number()
///
2
}}}

{{{id=20|
g=graphs.PathGraph(2)
gg=graphs.PathGraph(3)
ggg=CartesianProduct(g,gg)
show(ggg)
psd_TSgraph(ggg,Zplus(ggg))
///
}}}

{{{id=21|
g=graphs.WheelGraph(5)
show(g)
psd_TSgraph(g,Zplus(g))
///
}}}

{{{id=22|

///
}}}

{{{id=24|
g=graphs.CompleteBipartiteGraph(5,5)
g.delete_edges([(2,5),(0,9)])
print Zplus(g)
show(g)
///
5
}}}

{{{id=44|
g=graphs.CompleteMultipartiteGraph([5,5,5])
psd_TSgraph(g,Zplus(g)).connected_components_number()
///
3
}}}

{{{id=30|
g=graphs.CompleteBipartiteGraph(5,5)
g.add_vertex()
g.add_edges([(0,10),(5,10)])
show(g)
///
}}}

{{{id=25|
psd_TSgraph(g,Zplus(g)).plot()
///
}}}

{{{id=41|

///
}}}

{{{id=42|

///
}}}

{{{id=43|

///
}}}

{{{id=34|
g=graphs.CompleteBipartiteGraph(6,6)
g.delete_edges([(2,6),(3,6),(4,6),(1,6)])
print Zplus(g)
show(g)
psd_TSgraph2(g,Zplus(g)).plot()
///
6
}}}

{{{id=26|
g=graphs.CompleteBipartiteGraph(5,5)
g.add_edges([(0,1)])
print Zplus(g)
show(g)
///
5
}}}

{{{id=27|
g1=graphs.CompleteBipartiteGraph(3,4)
g2=graphs.CompleteBipartiteGraph(3,4)
g2.add_vertex()
g3=g1.disjoint_union(g2)
g3.relabel()
g3.add_edges([(14,3),(14,4),(14,5),(14,6),(14,10),(14,11),(14,12),(14,13)])
show(g3)
psd_TSgraph(g3,Zplus(g3)).connected_components_number()
///
4
}}}

{{{id=31|
g1=graphs.CompleteGraph(4)
g1.add_vertex()
g1.add_vertex()
g1.add_edges([(0,4),(0,5),(4,5)])
Zplus(g1)
///
4
}}}

{{{id=32|
def contract(H, e):
    G = H.copy() 
    u, v = e[0], e[1]
    vedges = [(v,x) for x in G[u]]  
    G.delete_vertex(u)
    G.add_edges( vedges)
    return G
///
}}}

{{{id=45|

///
6
}}}

{{{id=40|

///
[[(1, 2, 3, 4, 9, 10),
  (1, 2, 3, 4, 9, 11),
  (1, 2, 3, 4, 10, 11),
  (1, 2, 3, 5, 9, 10),
  (1, 2, 3, 5, 9, 11),
  (1, 2, 3, 5, 10, 11),
  (1, 2, 3, 6, 9, 10),
  (1, 2, 3, 6, 9, 11),
  (1, 2, 3, 6, 10, 11),
  (1, 2, 3, 7, 9, 10),
  (1, 2, 3, 7, 9, 11),
  (1, 2, 3, 7, 10, 11),
  (1, 2, 3, 8, 9, 10),
  (1, 2, 3, 8, 9, 11),
  (1, 2, 3, 8, 10, 11),
  (1, 2, 3, 9, 10, 11),
  (1, 2, 4, 8, 9, 10),
  (1, 2, 4, 8, 9, 11),
  (1, 2, 4, 8, 10, 11),
  (1, 2, 4, 9, 10, 11),
  (1, 2, 5, 8, 9, 10),
  (1, 2, 5, 8, 9, 11),
  (1, 2, 5, 8, 10, 11),
  (1, 2, 5, 9, 10, 11),
  (1, 2, 6, 8, 9, 10),
  (1, 2, 6, 8, 9, 11),
  (1, 2, 6, 8, 10, 11),
  (1, 2, 6, 9, 10, 11),
  (1, 2, 7, 8, 9, 10),
  (1, 2, 7, 8, 9, 11),
  (1, 2, 7, 8, 10, 11),
  (1, 2, 7, 9, 10, 11),
  (1, 3, 4, 8, 9, 10),
  (1, 3, 4, 8, 9, 11),
  (1, 3, 4, 8, 10, 11),
  (1, 3, 4, 9, 10, 11),
  (1, 3, 5, 8, 9, 10),
  (1, 3, 5, 8, 9, 11),
  (1, 3, 5, 8, 10, 11),
  (1, 3, 5, 9, 10, 11),
  (1, 3, 6, 8, 9, 10),
  (1, 3, 6, 8, 9, 11),
  (1, 3, 6, 8, 10, 11),
  (1, 3, 6, 9, 10, 11),
  (1, 3, 7, 8, 9, 10),
  (1, 3, 7, 8, 9, 11),
  (1, 3, 7, 8, 10, 11),
  (1, 3, 7, 9, 10, 11),
  (2, 3, 4, 8, 9, 10),
  (2, 3, 4, 8, 9, 11),
  (2, 3, 4, 8, 10, 11),
  (2, 3, 4, 9, 10, 11),
  (2, 3, 5, 8, 9, 10),
  (2, 3, 5, 8, 9, 11),
  (2, 3, 5, 8, 10, 11),
  (2, 3, 5, 9, 10, 11),
  (2, 3, 6, 8, 9, 10),
  (2, 3, 6, 8, 9, 11),
  (2, 3, 6, 8, 10, 11),
  (2, 3, 6, 9, 10, 11),
  (2, 3, 7, 8, 9, 10),
  (2, 3, 7, 8, 9, 11),
  (2, 3, 7, 8, 10, 11),
  (2, 3, 7, 9, 10, 11)],
 [(1, 4, 5, 6, 9, 10),
  (1, 4, 5, 6, 9, 11),
  (1, 4, 5, 6, 10, 11),
  (1, 4, 5, 7, 9, 10),
  (1, 4, 5, 7, 9, 11),
  (1, 4, 5, 7, 10, 11),
  (1, 4, 6, 7, 9, 10),
  (1, 4, 6, 7, 9, 11),
  (1, 4, 6, 7, 10, 11),
  (1, 5, 6, 7, 9, 10),
  (1, 5, 6, 7, 9, 11),
  (1, 5, 6, 7, 10, 11),
  (2, 4, 5, 6, 9, 10),
  (2, 4, 5, 6, 9, 11),
  (2, 4, 5, 6, 10, 11),
  (2, 4, 5, 7, 9, 10),
  (2, 4, 5, 7, 9, 11),
  (2, 4, 5, 7, 10, 11),
  (2, 4, 6, 7, 9, 10),
  (2, 4, 6, 7, 9, 11),
  (2, 4, 6, 7, 10, 11),
  (2, 5, 6, 7, 9, 10),
  (2, 5, 6, 7, 9, 11),
  (2, 5, 6, 7, 10, 11),
  (3, 4, 5, 6, 9, 10),
  (3, 4, 5, 6, 9, 11),
  (3, 4, 5, 6, 10, 11),
  (3, 4, 5, 7, 9, 10),
  (3, 4, 5, 7, 9, 11),
  (3, 4, 5, 7, 10, 11),
  (3, 4, 6, 7, 9, 10),
  (3, 4, 6, 7, 9, 11),
  (3, 4, 6, 7, 10, 11),
  (3, 5, 6, 7, 9, 10),
  (3, 5, 6, 7, 9, 11),
  (3, 5, 6, 7, 10, 11),
  (4, 5, 6, 7, 9, 10),
  (4, 5, 6, 7, 9, 11),
  (4, 5, 6, 7, 10, 11),
  (4, 5, 6, 8, 9, 10),
  (4, 5, 6, 8, 9, 11),
  (4, 5, 6, 8, 10, 11),
  (4, 5, 6, 9, 10, 11),
  (4, 5, 7, 8, 9, 10),
  (4, 5, 7, 8, 9, 11),
  (4, 5, 7, 8, 10, 11),
  (4, 5, 7, 9, 10, 11),
  (4, 6, 7, 8, 9, 10),
  (4, 6, 7, 8, 9, 11),
  (4, 6, 7, 8, 10, 11),
  (4, 6, 7, 9, 10, 11),
  (5, 6, 7, 8, 9, 10),
  (5, 6, 7, 8, 9, 11),
  (5, 6, 7, 8, 10, 11),
  (5, 6, 7, 9, 10, 11)]]
}}}

{{{id=75|

///
}}}

{{{id=46|
from sage.graphs.graph_input import from_graph6
g=Graph()
from_graph6(g, "Or`HOm@OhHBBEGHCgPSAJ")
show(g)
///
}}}

{{{id=73|

///
}}}

{{{id=72|
from sage.graphs.graph_plot import GraphPlot
options = {
    'vertex_size': 200,
    'vertex_labels': True,
    'layout': None,
    'edge_style': 'solid',
    'edge_color': 'black',
    'edge_colors': None,
    'edge_labels': False,
    'iterations': 50,
    'tree_orientation': 'down',
    'heights': None,
    'graph_border': False,
    'talk': False,
    'color_by_label': False,
    'partition': None,
    'dist': .075,
    'max_dist': 1.5,
    'loop_size': .075,
    'edge_labels_background': 'transparent'}
from sage.graphs.graph_input import from_graph6
g=Graph()
from_graph6(g, "Or`HOm@OhHBBEGHCgPSAJ")
GP = GraphPlot(g, options)
///
}}}

{{{id=74|
h=GP.plot()
h.save('gr.png')
g.edges(labels=False)
///
[(0, 1),
 (0, 2),
 (0, 4),
 (0, 8),
 (0, 15),
 (1, 3),
 (1, 5),
 (1, 9),
 (1, 14),
 (2, 3),
 (2, 6),
 (2, 10),
 (2, 13),
 (3, 7),
 (3, 11),
 (3, 12),
 (4, 5),
 (4, 6),
 (4, 11),
 (4, 12),
 (5, 7),
 (5, 10),
 (5, 13),
 (6, 7),
 (6, 9),
 (6, 14),
 (7, 8),
 (7, 15),
 (8, 9),
 (8, 10),
 (8, 12),
 (9, 11),
 (9, 13),
 (10, 11),
 (10, 14),
 (11, 15),
 (12, 13),
 (12, 14),
 (13, 15),
 (14, 15)]
}}}

{{{id=50|
from sage.graphs.graph_input import from_graph6
g=Graph()
from_graph6(g, "Or`HOm@OhHBBEGHCgPSAJ")
show(g)
///
}}}

{{{id=33|
skew_TEgraph(g,Zskew(g)).plot()
///
}}}

{{{id=35|
Zplus(g)
///
8
}}}

{{{id=36|

///
}}}

{{{id=37|

///
}}}

{{{id=38|

///
}}}

{{{id=39|

///
}}}

{{{id=51|

///
}}}

{{{id=52|

///
}}}

{{{id=53|

///
}}}

{{{id=54|

///
}}}

{{{id=55|

///
}}}

{{{id=56|

///
}}}